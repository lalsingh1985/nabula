name: "Optimized Kernel Build"

env:
  OUT_DIR: "out"
  KERNEL_DIR: "nabula"
  DEFCONFIG_NAME: "veux-qgki_defconfig"
  CLANG_VERSION: "stable"
  MAKE_JOBS: 4  # Optimized for GitHub Actions runners

on:
  workflow_dispatch:
    inputs:
      with_kernelsu:
        description: "Include KernelSU?"
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Optimized Build
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Prevent hanging builds

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: lalsingh1985/nabula
        path: ${{ env.KERNEL_DIR }}
        fetch-depth: 1  # Faster checkout

    - name: Setup Environment
      run: |
        sudo apt-get -qq update && sudo apt-get -qq install -y \
        bc build-essential clang flex bison libssl-dev libelf-dev \
        libncurses-dev git make gcc-aarch64-linux-gnu \
        && sudo rm -rf /var/lib/apt/lists/*

    - name: Cache Toolchains
      uses: actions/cache@v3
      id: toolchain-cache
      with:
        path: |
          ~/clang
          ~/gcc
        key: ${{ runner.os }}-toolchains-${{ env.CLANG_VERSION }}

    - name: Setup Clang
      if: steps.toolchain-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/clang
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -xzf clang-${{ env.CLANG_VERSION }}.tar.gz -C ~/clang
        echo "$HOME/clang/bin" >> $GITHUB_PATH

    - name: Configure Build
      working-directory: ./${{ env.KERNEL_DIR }}
      run: |
        # Apply battery optimizations
        scripts/config --file arch/arm64/configs/${{ env.DEFCONFIG_NAME }} \
          -e CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND \
          -e CONFIG_CPU_FREQ_GOV_POWERSAVE \
          -e CONFIG_SCHED_AUTOGROUP \
          -e CONFIG_ENERGY_MODEL \
          -e CONFIG_CPU_IDLE_GOV_MENU \
          -d CONFIG_DEBUG_KERNEL \
          -d CONFIG_DEBUG_FS

        make O=${{ env.OUT_DIR }} ARCH=arm64 ${{ env.DEFCONFIG_NAME }}

    - name: Build Kernel
      working-directory: ./${{ env.KERNEL_DIR }}
      run: |
        make -j${{ env.MAKE_JOBS }} O=${{ env.OUT_DIR }} ARCH=arm64 \
        CC=clang \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
        KCFLAGS="-O3 -mcpu=cortex-a76 -pipe -flto=thin" \
        LD=ld.lld \
        AR=llvm-ar \
        NM=llvm-nm \
        STRIP=llvm-strip \
        OBJCOPY=llvm-objcopy \
        OBJDUMP=llvm-objdump

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: |
          ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image
          ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/dtb
        retention-days: 3
