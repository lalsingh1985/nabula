name: "Build Nebula Kernel"

env:
  OUT_DIR: "out"
  KERNEL_DIR: "nabula"
  DEFCONFIG_NAME: "veux-qgki_defconfig"

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: "KernelSU version (none, main, next)"
        required: false
        type: string
        default: "none"

jobs:
  Build-Kernel:
    name: "Build Nebula Kernel"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          repository: lalsingh1985/nabula
          path: ${{ env.KERNEL_DIR }}

      - name: "Install prerequisites"
        run: |
          if [ ! -f ".requirements" ]; then
            sudo apt update && sudo apt install -y git device-tree-compiler lz4 xz-utils zlib1g-dev openjdk-17-jdk gcc g++ python3 python-is-python3 p7zip-full android-sdk-libsparse-utils erofs-utils \
            default-jdk git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses-dev libx11-dev libreadline-dev libgl1 libgl1-mesa-dev \
            python3 make sudo gcc g++ bc grep tofrodos python3-markdown libxml2-utils xsltproc zlib1g-dev python-is-python3 libc6-dev libtinfo6 \
            make repo cpio kmod openssl libelf-dev pahole libssl-dev libarchive-tools zstd --fix-missing && \
            wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb && \
            sudo dpkg -i libtinfo5_6.3-2ubuntu0.1_amd64.deb && \
            touch .requirements
          fi

      - name: "Setup Clang toolchain"
        run: |
          git clone --depth=1 https://gitlab.com/ThankYouMario/android_prebuilts_clang-standalone.git clang
          echo "$(pwd)/clang/bin" >> $GITHUB_PATH
          echo "CLANG_PATH=$(pwd)/clang/bin" >> $GITHUB_ENV

      - name: "Setup GCC toolchain"
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git gcc64
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git gcc32
          echo "$(pwd)/gcc64/bin" >> $GITHUB_PATH
          echo "$(pwd)/gcc32/bin" >> $GITHUB_PATH

      - name: "Add KernelSU (if requested)"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          if [ "${{ inputs.kernelsu_version }}" == "main" ]; then
            echo "Applying KernelSU main..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
            echo "CONFIG_KPROBES=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          elif [ "${{ inputs.kernelsu_version }}" == "next" ]; then
            echo "Applying KernelSU-Next..."
            git clone --depth=1 https://github.com/tiann/kernel_su.git
            cd kernel_su
            python3 kernel_su/setup.py install --config kernel_su/config.json
            cd ..
            echo "CONFIG_KPROBES=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_OVERLAY_FS=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi

      - name: "Set build environment"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=${{ env.CLANG_PATH }}:$PATH
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export KBUILD_COMPILER_STRING="$(${{ env.CLANG_PATH }}/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"

          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-androideabi-" >> $GITHUB_ENV
          echo "KBUILD_COMPILER_STRING=$KBUILD_COMPILER_STRING" >> $GITHUB_ENV

      - name: "Make defconfig"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          make O=${{ env.OUT_DIR }} ARCH=arm64 ${{ env.DEFCONFIG_NAME }}

      - name: "Build kernel"
        working-directory: ./${{ env.KERNEL_DIR }}
        run: |
          make -j$(nproc) O=${{ env.OUT_DIR }} ARCH=arm64 \
          CC=clang \
          CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
          CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
          CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }}

      - name: "Upload Kernel Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: |
            ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/Image
            ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/dtb
            ${{ env.KERNEL_DIR }}/${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img
          retention-days: 7
